"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _ui = require("@sanity/ui");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function DashboardLayout(props) {
  var width = props.width;
  var formattedWidth = (0, _react.useMemo)(() => getWidth(width), [width]);
  return /*#__PURE__*/_react.default.createElement(_ui.Container, {
    width: formattedWidth,
    padding: 4,
    sizing: "border",
    style: {
      minHeight: '100%'
    },
    "data-name": "dashboard-layout"
  }, props.children);
}
function getWidth(value) {
  var widthMap = {
    small: 2,
    medium: 3,
    large: 4
  };
  return (widthMap === null || widthMap === void 0 ? void 0 : widthMap[value]) || widthMap.large;
}
DashboardLayout.propTypes = {
  // eslint-disable-next-line react/forbid-prop-types
  children: _propTypes.default.any,
  width: _propTypes.default.oneOf(['small', 'medium', 'large'])
};
DashboardLayout.defaultProps = {
  children: 'Dummy'
};
var _default = DashboardLayout;
exports.default = _default;